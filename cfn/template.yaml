AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: POC AWS CloudFormation with API gateway resources.

Parameters:
  Environment:
    Type: String
    Description: The runtime environment of this stack
  MapBurstLimit:
    Type: Number
    Default: 100
  MapRateLimit:
    Type: Number
    Default: 100
  MapThrottlingLimit:
    Type: Number
    Default: 100
  MapThrottlingBurstLimit:
    Type: Number
    Default: 100

Conditions:
# If the build is not on Deployment branch this condition is true.
  IsTestBuild: !Not
    - !Or
      - !Equals [ !Ref Environment, "dev" ]
      - !Equals [ !Ref Environment, "uat" ]

Mappings:
  AccountMappings: 
    '231252353945': # dev
        APIHostedZoneId: Z06139472BA0XYSWA4JJ4
        APIDomainName: example-api.testrewardsapp.com

Resources: 

  # API gateway 
  ExampleAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Domain:
        CertificateArn: !Ref APIDomainACM
        DomainName: !If
          - IsTestBuild
          - !Sub
                - ${Environment}.${DomainName}
                - DomainName: !FindInMap [AccountMappings, !Ref 'AWS::AccountId', APIDomainName]
          - !FindInMap [AccountMappings, !Ref 'AWS::AccountId', APIDomainName]
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !FindInMap [AccountMappings, !Ref 'AWS::AccountId', APIHostedZoneId]
      OpenApiVersion: '2.0'
      EndpointConfiguration:
        Type: REGIONAL
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: '../swagger-docs/poc-service-api.yaml'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          DataTraceEnabled: true
          LoggingLevel: INFO
          MetricsEnabled: true
          ThrottlingRateLimit: !Ref MapThrottlingLimit
          ThrottlingBurstLimit: !Ref MapThrottlingBurstLimit
      Auth:
        ApiKeyRequired: true
      TracingEnabled: true  
  
  ExampleAPIGatewayUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    # Adding ExampleAPIGatewayStage in order to create UsagePlan after stage is created
    # referring to ExampleAPIGatewayStage (<api-name>Stage) which is the default name creation for stage in AWS
    DependsOn:
      - ExampleAPIGatewayStage
    Properties:
      ApiStages:
        - ApiId: !Ref ExampleAPIGateway
          Stage: !Ref Environment
      Description: Usage plan for this API
      # Update throttle settings based on env
      Throttle:
        RateLimit: !Ref MapBurstLimit
        BurstLimit: !Ref MapRateLimit

  ExampleAPIGatewayUsagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    DependsOn:
      - ExampleAPIGatewayStage
    Properties:
      KeyId: !Ref ExampleAPIGatewayApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ExampleAPIGatewayUsagePlan

  ExampleAPIGatewayApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn:
      - ExampleAPIGatewayUsagePlan
      - ExampleAPIGatewayStage
    Properties:
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ExampleAPIGateway
          StageName: !Ref Environment
      Value: !Join ['', ['{{resolve:secretsmanager:', !Ref GenerateSecretKey, ':SecretString:apikey}}']]

  GenerateSecretKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub SecretKeyExampleAPI/${Environment}
      GenerateSecretString:
        SecretStringTemplate: '{"username": "getapikey"}'
        ExcludePunctuation: true
        GenerateStringKey: 'apikey'
        PasswordLength: 21


  APIDomainACM:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If
        - IsTestBuild
        - !Sub
              - ${Environment}.${DomainName}
              - DomainName: !FindInMap [AccountMappings, !Ref 'AWS::AccountId', APIDomainName]
        - !FindInMap [AccountMappings, !Ref 'AWS::AccountId', APIDomainName]
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !If
            - IsTestBuild
            - !Sub
                  - ${Environment}.${DomainName}
                  - DomainName: !FindInMap [AccountMappings, !Ref 'AWS::AccountId', APIDomainName]
            - !FindInMap [AccountMappings, !Ref 'AWS::AccountId', APIDomainName]
          HostedZoneId: !FindInMap [AccountMappings, !Ref 'AWS::AccountId', APIHostedZoneId]


  ExampleLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Example Lambda to print request data"
      Role: !GetAtt ExampleLambdaRole.Arn
      Handler: handler.handler    # This should be the name of the handler function in the compiled JS file
      Runtime: nodejs20.x        # Use a Node.js runtime version (can be nodejs14.x, nodejs16.x, nodejs18.x)
      Architectures:
        - x86_64
      Timeout: 300
      CodeUri: ../lambdas/dist/handler.zip  # Path to the ZIP file containing compiled JavaScript code
      Tracing: Active
      Environment:
        Variables:
          Environment: "api-poc"

  ExampleLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub example-lambda-role-api-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecution
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        